
























































































app.use(jsonErrorHandler);app.use(express.json());const app = express();import jsonErrorHandler from "./middlewares/errorHandler.js";import express from "express";};	return res.status(200).json(details);	console.log(`Details of ${scholarNumber} : `, details[0]);	const details = await getStudentDetails(scholarNumber);	}		return res.status(400).json({ error: "Invalid scholar number" });	if (!validator.matches(scholarNumber, /^[0-9]{10}$/)) {	const scholarNumber = req.body.scholarNumber;export const studentDetails = async (req, res) => {};		.json( updatedResults );		.status(200)	return res	);		})			};				subjectName: subjectDetail ? subjectDetail.subjectName : null,				subjectCode: subjectDetail ? subjectDetail.subjectCode : null,				...record,			return {			const subjectDetail = await getSubjectDetails(record.subjectId);		results.map(async (record) => {	const updatedResults = await Promise.all(	// Replace subjectId with subjectCode and subjectName using getSubjectDetails	console.log("Attendance Collection Results:", results);		.toArray();		.aggregate(pipeline)		.collection("Attendance")	const results = await db	);		normalizedSection		semester,		branch,		scholarNumber,	const pipeline = getMonthlyPipeline(	// Build aggregation pipeline using request parameters with normalized section	console.log("Normalized Section:", normalizedSection);	const normalizedSection = section.length === 1 ? `0${section}` : section;	// Optional: Normalize section if needed (e.g., pad with zero)	const db = getDB("ATMS"); // Database is ATMS	}			.json({ error: "Branch does not match student's record" });			.status(400)		return res	if (student.branch !== branch) {	// Verify that the provided branch matches the student's record (if applicable)	console.log("\nDetailsof the student  : ", student, "\n");	const student = studentDetails[0];	const studentDetails = await getStudentDetails(scholarNumber);	// Get student details	}			.json({ error: "Branch, semester, and section are required" });			.status(400)		return res	if (!branch  || !section) {	const {branch,section} = getStudentDetails(scholarNumber);	}		return res.status(400).json({ error: "Invalid scholar number" });	if (!validator.matches(scholarNumber, /^[0-9]{10}$/)) {	// Validate scholarNumber and required fields	console.log(req.body);	const { scholarNumber} = req.body;export const monthlyReport = async (req, res) => {import { getMonthlyPipeline } from "../../Pipelines/Monthly.js";import { getSubjectDetails } from "../../Utils/common/getSubjectDetails.js";import { getStudentDetails } from "../../Utils/Student/getStudetDetails.js";import validator from "validator";import { getDB } from "../../config/mongodb.js";